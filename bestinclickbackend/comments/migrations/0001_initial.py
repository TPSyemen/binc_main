# Generated by Django 5.2.4 on 2025-07-07 06:53

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Review text content')),
                ('rating', models.IntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('is_verified_purchase', models.BooleanField(default=False, help_text='Whether this review is from a verified purchase')),
                ('helpful_votes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comments',
            },
        ),
        migrations.CreateModel(
            name='AISentimentAnalysisResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sentiment', models.CharField(choices=[('positive', 'Positive'), ('negative', 'Negative'), ('neutral', 'Neutral')], max_length=20)),
                ('confidence_score', models.FloatField(help_text='Confidence score of sentiment analysis (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('emotion_scores', models.JSONField(blank=True, help_text='Detailed emotion analysis (joy, anger, sadness, etc.)', null=True)),
                ('keywords', models.JSONField(blank=True, help_text='Key phrases and topics extracted from the comment', null=True)),
                ('analyzed_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sentiment_analysis', to='comments.comment')),
            ],
            options={
                'db_table': 'ai_sentiment_analysis',
            },
        ),
        migrations.CreateModel(
            name='CommentHelpfulness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_helpful', models.BooleanField(help_text='True if helpful, False if not helpful')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpfulness_votes', to='comments.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comment_helpfulness',
            },
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['product', 'created_at'], name='comments_product_59d809_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['product', 'rating'], name='comments_product_58e8d6_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['user', 'created_at'], name='comments_user_id_88f50c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='comment',
            unique_together={('user', 'product')},
        ),
        migrations.AddIndex(
            model_name='aisentimentanalysisresult',
            index=models.Index(fields=['sentiment', 'confidence_score'], name='ai_sentimen_sentime_705414_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='commenthelpfulness',
            unique_together={('user', 'comment')},
        ),
    ]
